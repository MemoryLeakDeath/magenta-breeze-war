<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>tv.memoryleakdeath</groupId>
  <artifactId>magenta-breeze-war</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <properties>
	  	<maven.compiler.target>17</maven.compiler.target>
        <maven.compiler.source>17</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 
        <finalname>ROOT-${project.version}</finalname>       
        <spring.framework.version>6.1.10</spring.framework.version>
		<servlet.api.version>6.0.0</servlet.api.version>        
		<slf4j.version>2.0.13</slf4j.version>
        <logback.version>1.5.6</logback.version>
        <junit.version>5.10.2</junit.version>
        <mockito.version>5.12.0</mockito.version>
        <hamcrest.version>2.2</hamcrest.version>
        <jsonpath.version>2.9.0</jsonpath.version>
        <liquidbase.version>4.28.0</liquidbase.version>
        <jackson.version>2.17.1</jackson.version>
        <jakarta.annotation-api.version>3.0.0</jakarta.annotation-api.version>
        <faker.version>2.2.2</faker.version>
        <h2.version>2.2.224</h2.version>
        <freemarker.version>2.3.33</freemarker.version>
        <commonslang.version>3.14.0</commonslang.version>
        <hikari.version>5.1.0</hikari.version>
        <velocity.version>2.3</velocity.version>
        <twitch4j.version>1.20.0</twitch4j.version>
        <httpclient.version>5.3.1</httpclient.version>
        <skipcertimport>false</skipcertimport>
  </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring.framework.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>  
    <dependencies>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.1.0</version>
            <scope>provided</scope> 
        </dependency>        
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>   
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		</dependency>             
         <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
		<dependency>
		    <groupId>com.fasterxml.jackson.datatype</groupId>
		    <artifactId>jackson-datatype-jsr310</artifactId>
		    <version>${jackson.version}</version>
		</dependency>
		<dependency>
		    <groupId>jakarta.annotation</groupId>
		    <artifactId>jakarta.annotation-api</artifactId>
		    <version>${jakarta.annotation-api.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <version>${h2.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.freemarker</groupId>
		    <artifactId>freemarker</artifactId>
		    <version>${freemarker.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>${commonslang.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.zaxxer</groupId>
		    <artifactId>HikariCP</artifactId>
		    <version>${hikari.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.liquibase</groupId>
		    <artifactId>liquibase-core</artifactId>
		    <version>${liquidbase.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>${velocity.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>spring-velocity-support</artifactId>
			<version>${velocity.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.github.twitch4j</groupId>
		    <artifactId>twitch4j</artifactId>
		    <version>${twitch4j.version}</version>
		</dependency>	
		<dependency>
		    <groupId>org.apache.httpcomponents.client5</groupId>
		    <artifactId>httpclient5</artifactId>
		    <version>${httpclient.version}</version>
		</dependency>	
				
		<!-- TEST Dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>${jsonpath.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
            <version>${faker.version}</version>
            <scope>test</scope>
        </dependency>        
   </dependencies>    
    <build>
        <finalName>${finalname}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources_filtered</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources_filtered</directory>
                <filtering>true</filtering>                
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>                
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>${maven.compiler.target}</release>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
            </plugin>
            <plugin>  
                <groupId>org.liquibase</groupId>  
                <artifactId>liquibase-maven-plugin</artifactId>  
                <version>${liquidbase.version}</version>
                <configuration>
                    <propertyFile>liquibase.properties</propertyFile>
                </configuration>  
                <dependencies>  
					<dependency>
					    <groupId>com.h2database</groupId>
					    <artifactId>h2</artifactId>
					    <version>${h2.version}</version>
					</dependency>
              </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.4.0</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>10.17.0</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
           </plugin>
           <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-surefire-plugin</artifactId>
               <version>3.3.0</version>
               <configuration>
                   <groups>unit-test</groups>
               </configuration>
           </plugin>
           <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <groups>integration-test</groups>
                </configuration>
           </plugin>
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.15.0</version>
                <executions>
                    <execution>
                        <id>install npm and node</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <nodeVersion>v18.15.0</nodeVersion>
                            <npmVersion>9.6.5</npmVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm install Resources</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>                    
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>Copy frontend NPM resources to static js folder</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/src/main/webapp/WEB-INF/js</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/node_modules/jquery/dist/</directory>
                                    <include>jquery.min.js</include>
                                    <include>jquery.min.map</include>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}/node_modules/bootstrap/dist/js</directory>
                                    <include>bootstrap.bundle.min.js</include>
                                    <include>bootstrap.bundle.min.js.map</include>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}/node_modules/htmx.org/dist</directory>
                                    <include>htmx.min.js</include>
                                    <include>htmx.min.js.gz</include>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}/node_modules/htmx.org/dist/ext</directory>
                                    <include>sse.js</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Copy frontend jquery minicolors resources to static js folder</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/src/main/webapp/WEB-INF/js/jquery-minicolors</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/node_modules/@claviska/jquery-minicolors</directory>
                                    <include>jquery.minicolors.css</include>
                                    <include>jquery.minicolors.png</include>
                                    <include>jquery.minicolors.min.js</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Copy frontend NPM resources to static css folder</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/src/main/webapp/WEB-INF/css</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/node_modules/bootstrap/dist/css</directory>
                                    <include>bootstrap.min.css</include>
                                    <include>bootstrap.min.css.map</include>
                                </resource>
                                <resource>
                                    <directory>${project.basedir}/node_modules/@fortawesome/fontawesome-free/css</directory>
                                    <include>brands.min.css</include>
                                    <include>fontawesome.min.css</include>
                                    <include>solid.min.css</include>
                                    <include>regular.min.css</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Copy frontend NPM resources to static fonts folder</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/src/main/webapp/WEB-INF/webfonts</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/node_modules/@fortawesome/fontawesome-free/webfonts</directory>
                                    <include>fa-brands-400.ttf</include>
                                    <include>fa-brands-400.woff2</include>
                                    <include>fa-regular-400.ttf</include>
                                    <include>fa-regular-400.woff2</include>
                                    <include>fa-solid-900.ttf</include>
                                    <include>fa-solid-900.woff2</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
					<execution>
				      <id>generate-root-cert</id>
					  <goals>
					    <goal>generateKeyPair</goal>
					  </goals>
					  <phase>generate-resources</phase>
						<configuration>
						  <keystore>${project.basedir}/conf/localhost_mb_root_keystore.jks</keystore>
						  <storepass>changeit</storepass>
						  <keypass>changeit</keypass>
						  <alias>rootCA</alias>
						  <dname>cn=localhost, ou=Root CA, L=Philadelphia, ST=PA, o=MagentaBreezeCA, c=US</dname>
						  <validity>3650</validity>
						  <keyalg>RSA</keyalg>
						  <keysize>2048</keysize>
						  <sigalg>SHA256withRSA</sigalg>
						  <exts>SubjectAlternativeName=DNS:localhost</exts>
						  <skipIfExist>true</skipIfExist>
						</configuration>
					</execution>
			        <execution>
			            <id>export-root-ca</id>
			            <goals>
			                <goal>exportCertificate</goal>
			            </goals>
			            <phase>generate-resources</phase>
			            <configuration>
			                <keystore>${project.basedir}/conf/localhost_mb_root_keystore.jks</keystore>
			                <storepass>changeit</storepass>
			                <alias>rootCA</alias>
			                <file>${project.basedir}/conf/localhost_root_ca.crt</file>
			            </configuration>
			        </execution>
					<execution>
					  <id>generate-server-cert</id>
					  <goals>
					    <goal>generateKeyPair</goal>
					  </goals>
					  <phase>generate-resources</phase>
						<configuration>
						  <keystore>${project.basedir}/conf/localhost_mb_server_keystore.jks</keystore>
						  <storepass>changeit</storepass>
						  <keypass>changeit</keypass>
						  <alias>server</alias>
						  <dname>cn=localhost, ou=Server Cert, L=Philadelphia, ST=PA, o=MagentaBreezeServer, c=US</dname>
						  <validity>3650</validity>
						  <keyalg>RSA</keyalg>
						  <keysize>2048</keysize>
						  <sigalg>SHA256withRSA</sigalg>
						  <exts>SubjectAlternativeName=DNS:localhost</exts>
						  <skipIfExist>true</skipIfExist>
						</configuration>
					</execution>
					<execution>
					    <id>generate-csr</id>
					    <goals>
					        <goal>generateCertificateRequest</goal>
					    </goals>
					    <phase>generate-resources</phase>
					    <configuration>
					        <keystore>${project.basedir}/conf/localhost_mb_server_keystore.jks</keystore>
					        <storepass>changeit</storepass>
					        <alias>server</alias>
					        <dname>cn=localhost, ou=Server Certificate, L=Philadelphia, ST=PA, o=MagentaBreeze, c=US</dname>
					        <sigalg>SHA256withRSA</sigalg>
					        <file>${project.basedir}/conf/localhost_mb_server.csr</file>
					    </configuration>
					</execution>
			        <execution>
			            <id>import-root-ca-to-server-keystore</id>
			            <goals>
			                <goal>importCertificate</goal>
			            </goals>
			            <phase>generate-resources</phase>
			            <configuration>
			                <keystore>${project.basedir}/conf/localhost_mb_server_keystore.jks</keystore>
			                <storepass>changeit</storepass>
			                <alias>rootCA</alias>
			                <file>${project.basedir}/conf/localhost_root_ca.crt</file>
			                <trustcacerts>true</trustcacerts>
			                <noprompt>true</noprompt>
			                <skip>${skipcertimport}</skip>
			            </configuration>
			        </execution>
                </executions>
            </plugin>
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>exec-maven-plugin</artifactId>
			    <version>3.3.0</version>
			    <executions>
			        <execution>
			            <id>sign-server-certificate</id>
			            <phase>generate-resources</phase>
			            <goals>
			                <goal>exec</goal>
			            </goals>
			            <configuration>
			                <executable>keytool</executable>
			                <arguments>
			                    <argument>-gencert</argument>
			                    <argument>-alias</argument>
			                    <argument>rootCA</argument>
			                    <argument>-infile</argument>
			                    <argument>${project.basedir}/conf/localhost_mb_server.csr</argument>
			                    <argument>-outfile</argument>
			                    <argument>${project.basedir}/conf/localhost_mb_server.crt</argument>
			                    <argument>-keystore</argument>
			                    <argument>${project.basedir}/conf/localhost_mb_root_keystore.jks</argument>
			                    <argument>-storepass</argument>
			                    <argument>changeit</argument>
			                    <argument>-ext</argument>
			                    <argument>BasicConstraints:critical=ca:false</argument>
			                    <argument>-ext</argument>
			                    <argument>KeyUsage:critical=keyEncipherment,digitalSignature</argument>
			                    <argument>-ext</argument>
			                    <argument>ExtendedKeyUsage=serverAuth</argument>
			                    <argument>-ext</argument>
			                    <argument>SubjectAlternativeName=DNS:localhost</argument>
			                    <argument>-rfc</argument>
			                </arguments>
			            </configuration>
			        </execution>
			        <execution>
			            <id>import-server-certificate</id>
			            <phase>generate-resources</phase>
			            <goals>
			                <goal>exec</goal>
			            </goals>
			            <configuration>
			                <executable>keytool</executable>
			                <arguments>
			                    <argument>-importcert</argument>
			                    <argument>-alias</argument>
			                    <argument>server</argument>
			                    <argument>-trustcacerts</argument>
			                    <argument>-file</argument>
			                    <argument>${project.basedir}/conf/localhost_mb_server.crt</argument>
			                    <argument>-keystore</argument>
			                    <argument>${project.basedir}/conf/localhost_mb_server_keystore.jks</argument>
			                    <argument>-storepass</argument>
			                    <argument>changeit</argument>
			                    <argument>-noprompt</argument>
			                </arguments>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>
        </plugins>
    </build>
    <profiles>
		<profile>
            <id>init-dev</id>
			<activation>
				<file>
					<missing>src/main/resources/resources.db</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.3.0</version>
						<executions>
							<execution>
								<id>init-resource-db</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>java</goal>									
								</goals>
								<configuration>
									<mainClass>tv.memoryleakdeath.magentabreeze.build.BuildResourceStore</mainClass>
									<arguments>
										<argument>${project.basedir}/secretkeys.properties</argument>
										<argument>${project.basedir}/src/main/resources/resources.db</argument>
										<argument>${project.basedir}/src/main/resources/index.mstore</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>			
			</build>
        </profile>
        <profile>
            <id>certs-already-inited</id>
            <activation>
				<file>
                    <exists>conf/localhost_mb_server.crt</exists>                   
                </file>
			</activation>
			<properties>
				<skipcertimport>true</skipcertimport>
			</properties>
		</profile>
	</profiles>
</project>